package com.didi.virtualapk.hooker

import com.android.build.gradle.AppExtension
import com.android.build.gradle.api.ApkVariant
import com.android.build.gradle.tasks.MergeSourceSetFolders
import com.android.utils.StringHelper
import com.didi.virtualapk.collector.dependence.AarDependenceInfo
import groovy.io.FileType
import org.gradle.api.Project

/**
 * Remove the asset directory included in the excluded library before mergeAssets task
 *
 * @author zhengtao
 */
class MergeAssetsHooker extends GradleTaskHooker<MergeSourceSetFolders> {
    AppExtension androidConfig

    public MergeAssetsHooker(Project project, ApkVariant apkVariant) {
        super(project, apkVariant)
        androidConfig = project.extensions.findByType(AppExtension)
    }

    @Override
    String getTaskName() {
        return StringHelper.appendCapitalized("merge", apkVariant.name, "Assets")
    }

    /**
     * Remove the element(AssetSet) generated by the stripped dependenceInfos in the task inputDirectorySets
     * @param mergeAssetsTask Gradle task of mergeAssets
     */
    @Override
    void beforeTaskExecute(MergeSourceSetFolders mergeAssetsTask) {

//        Set<String> strippedAssetPaths = vaContext.stripDependencies.collect {
//            if (it instanceof AarDependenceInfo) {
//                return it.assetsFolder.path
//            }
//            return ''
//        }

        def list = new ArrayList<String>()

        vaContext.stripDependencies.each {
            if (it instanceof AarDependenceInfo) {
                def dir = it.assetsFolder
                if (dir.exists()) {
                    dir.eachFileRecurse(FileType.FILES) { file ->
                        list << file.path.replace(dir.path, "")
                    }
                }
            }
        }
        ///mergeAssetsTask.getOutputDir().get().asFile = Users/sansecy/Downloads/shanpao/shanpao_tv/plugin/build/intermediates/merged_assets/jxSpOnlineBaseNoaiDebug/out
        def dirParent = mergeAssetsTask.getOutputDir().get().asFile
        list.each {
            def file = new File(dirParent.path + it)
            project.delete(file)
        }
//        ListProperty<AssetSet> assetSetListProperty = Reflect.on(task).get("assetSets")
//        def assetSetList = assetSetListProperty.get()
//        assetSetList.removeIf(new Predicate<AssetSet>() {
//            @Override
//            boolean test(AssetSet assetSet) {
//                boolean ret = strippedAssetPaths.contains(assetSet.sourceFiles.get(0).path)
//                if (ret) {
//                    Log.i 'MergeAssetsHooker', "Stripped asset of artifact: ${assetSet} -> ${assetSet.sourceFiles.get(0).path}"
//                }
//                return ret
//            }
//        })
    }

    @Override
    void afterTaskExecute(MergeSourceSetFolders task) {
    }
}